{"name":"Filbert","tagline":"JavaScript parser of Python","body":"﻿# Filbert\r\n\r\nJavaScript-based Python parser.  Outputs an abstract syntax tree as specified by the\r\n[Mozilla Parser API][mozapi].\r\n\r\n[mozapi]: https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey/Parser_API\r\n\r\nThis parser is a work in progress, adapted from the JavaScript parser [Acorn][acorn].\r\n\r\n[acorn]: https://github.com/marijnh/acorn\r\n\r\n## Want to contribute?\r\n\r\nGreat!  Feel free to [submit a pull request](https://help.github.com/articles/using-pull-requests), file some [GitHub issues](https://github.com/differentmatt/filbert/issues), or [email Matt](mailto:mattlott@gmail.com)\r\n\r\n## Installation\r\n\r\n```sh\r\nnpm install filbert\r\n```\r\n\r\n## Components\r\n\r\nWhen run in a CommonJS (node.js) or AMD environment, exported values\r\nappear in the interfaces exposed by the individual files, as usual.\r\nWhen loaded in the browser without any kind of module management, a\r\nsingle global object `filbert` will be defined, and all the exported\r\nproperties will be added to that.\r\n\r\n### filbert.js\r\n\r\nThis file contains the actual parser (and is what you get when you\r\n`require(\"filbert\")` in node.js).\r\n\r\n**parse**`(input, options)` is used to parse a Python program.\r\nThe `input` parameter is a string, `options` can be undefined or an\r\nobject setting some of the options listed below. The return value will\r\nbe an abstract syntax tree object as specified by the\r\n[Mozilla Parser API][mozapi].\r\n\r\nWhen  encountering   a  syntax   error,  the   parser  will   raise  a\r\n`SyntaxError` object with a meaningful  message. The error object will\r\nhave a `pos` property that indicates the character offset at which the\r\nerror occurred,  and a `loc`  object that contains a  `{line, column}`\r\nobject referring to that same position.\r\n\r\n[mozapi]: https://developer.mozilla.org/en-US/docs/SpiderMonkey/Parser_API\r\n\r\n- **locations**: When `true`, each node has a `loc` object attached\r\n  with `start` and `end` subobjects, each of which contains the\r\n  one-based line and zero-based column numbers in `{line, column}`\r\n  form. Default is `false`.\r\n\r\n- **ranges**: To add a [semi-standardized][range] \"range\" property holding a\r\n  `[start, end]` array with the same numbers, set the `ranges` option\r\n  to `true`.\r\n\r\n[range]: https://bugzilla.mozilla.org/show_bug.cgi?id=745678\r\n\r\n**pythonRuntime** holds an object required to execute JavaScript code that\r\nhas been generated from the output AST.  (e.g. the builtin len() function\r\nis not native to JavaScript).  This object must be available if the AST output from\r\nparse will be used to generate and execute JavaScript code.\r\n\r\n**runtimeParamName** name of the python runtime object that will be referenced\r\nin the output AST. (e.g. if set to '\\__pythonRuntime', AST nodes will have\r\nreferences to a '\\__pythonRuntime' object).\r\n\r\n**tokenize**`(input, options)` exports a primitive interface to\r\nFilbert's tokenizer. The function takes an input string and options\r\nsimilar to `parse`, and returns a function that can be called repeatedly\r\nto read a single token, and returns a `{start, end, type, value}` object \r\n(with added `startLoc` and `endLoc` properties when the `locations` option \r\nis enabled). This object will be reused (updated) for each token, so you\r\ncan't count on it staying stable.\r\n\r\n**tokTypes** holds an object mapping names to the token type objects\r\nthat end up in the `type` properties of tokens.\r\n\r\n### filbert_loose.js ###\r\n\r\nThis file implements an error-tolerant parser. It exposes a single\r\nfunction.\r\n\r\n**parse_dammit**`(input, options)` takes the same arguments and\r\nreturns the same syntax tree as the `parse` function in `filbert.js`,\r\nbut never raises an error, and will do its best to parse syntactically\r\ninvalid code in as meaningful a way as it can. It'll insert identifier\r\nnodes with name `\"✖\"` as placeholders in places where it can't make\r\nsense of the input. Depends on `filbert.js`, because it uses the same\r\ntokenizer.\r\n\r\n## Language Support\r\n\r\nPython3 is the target language.  Much of it is working, and the remaining pieces are outlined below.\r\n\r\n### Supported\r\n\r\nKeywords:\r\n>False None True and break class continue def elif else for if in is not or pass return while\r\n\r\nBuilt-ins:\r\n>abs() all() any() bool() chr() dict() enumerate() filter() float() hex() int() len() list() map() max() min() oct() ord() pow() print() range() repr() reversed() round() sorted() str() sum() tuple()\r\n\r\n### Coming Soon!\r\n\r\nKeywords:\r\n>as assert del except finally from import global lambda nonlocal raise try with yield\r\n\r\nBuilt-ins:\r\n>ascii() bin() bytearray() bytes() callable() classmethod() compile() complex() delattr() dir() divmod() eval() exec() format() frozenset() getattr() globals() hasattr() hash() help() id() input() isinstance() issubclass() iter() locals() memoryview() next() object() open() property() set() setattr() slice() staticmethod() super() type() vars() zip() \\__import__() \r\n\r\nAdvanced features:\r\n- Sequence operations\r\n- List comprehensions\r\n- Regular expressions\r\n- Slices\r\n\r\n## Testing\r\n\r\n```sh\r\ngrunt test\r\n```\r\n\r\n## Get in touch\r\n\r\nPlease use the [GitHub issues](https://github.com/differentmatt/filbert/issues), or [email Matt](mailto:mattlott@gmail.com)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}